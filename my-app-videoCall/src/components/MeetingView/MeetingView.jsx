import React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';
import { useMeeting } from '@videosdk.live/react-sdk';
import ParticipantView from '../ParticipantView/ParticipantView';
import styles from './MeetingView.module.scss';

const MeetingView = forwardRef(({ 
  onMeetingLeave, 
  userName, 
  isAudioCall, 
  callState, 
  onAcceptCall 
}, ref) => {
  const [joined, setJoined] = useState(null);
  
  const { join, leave, toggleMic, toggleWebcam, participants, micOn, webcamOn } = useMeeting({
    onMeetingJoined: () => {
      console.log('‚úÖ Meeting joined successfully');
      setJoined("JOINED");
    },
    onMeetingLeft: () => {
      console.log('üìû Meeting left');
      onMeetingLeave();
    },
    onError: (error) => {
      console.error('‚ùå Meeting error:', error);
    }
  });

  useImperativeHandle(ref, () => ({
    triggerLeave: () => {
      console.log('üîÑ Triggered leave from socket event');
      console.log('üîç Current joined state:', joined);
      console.log('üîç Leave function available:', typeof leave);
      if (joined === "JOINED") {
        console.log('‚úÖ Calling leave() from triggerLeave');
        leave();
      } else {
        console.warn('‚ùå Cannot call leave() - not joined or joined state:', joined);
      }
    }
  }), [leave, joined]);

  // Auto-join when call state becomes 'in-call'
  useEffect(() => {
    if (callState === 'in-call' && joined === null) {
      console.log('üîó Auto-joining meeting...');
      setJoined("JOINING");
      join();
    }
  }, [callState, joined, join]);

  // Cleanup —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –Ω–µ –ø—ñ–¥ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∑–≤—ñ–Ω–∫–∞
  useEffect(() => {
    return () => {
      console.log('üßπ Component unmounting, cleaning up');
      setJoined(null);
    };
  }, []);

  // Debug: log joined state changes
  useEffect(() => {
    console.log('üîç MeetingView joined state changed:', joined);
  }, [joined]);

  const handleAccept = () => {
    onAcceptCall();
  };

  const handleReject = () => {
    onMeetingLeave();
  };

  // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: toggleMic –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á—ñ event –æ–±'—î–∫—Ç–∞
  const handleToggleMic = () => {
    toggleMic();
  };

  // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: toggleWebcam –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á—ñ event –æ–±'—î–∫—Ç–∞  
  const handleToggleWebcam = () => {
    toggleWebcam();
  };

  // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: leave –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –æ—á–∏—â–µ–Ω–Ω—è–º
  const handleLeave = () => {
    leave();
  };

  if (callState === 'receiving') {
    return (
      <div className={styles.container}>
        <div className={styles.incomingCall}>
          <div className={styles.userAvatar}>
            <div className={styles.avatarCircle}>
              {userName.charAt(0).toUpperCase()}
            </div>
          </div>
          <h3 className={styles.callerName}>{userName}</h3>
          <p className={styles.callType}>
            {isAudioCall ? 'üìû –ê—É–¥—ñ–æ –¥–∑–≤—ñ–Ω–æ–∫' : 'üìπ –í—ñ–¥–µ–æ –¥–∑–≤—ñ–Ω–æ–∫'}
          </p>
          <div className={styles.callActions}>
            <button 
              className={`${styles.actionBtn} ${styles.accept}`}
              onClick={handleAccept}
            >
              ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏
            </button>
            <button 
              className={`${styles.actionBtn} ${styles.reject}`}
              onClick={handleReject}
            >
              ‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (callState === 'calling') {
    return (
      <div className={styles.container}>
        <div className={styles.outgoingCall}>
          <div className={styles.userAvatar}>
            <div className={styles.avatarCircle}>
              {userName.charAt(0).toUpperCase()}
            </div>
          </div>
          <h3 className={styles.callerName}>{userName}</h3>
          <p className={styles.callStatus}>–î–∑–≤–æ–Ω–∏–º–æ...</p>
          <button 
            className={`${styles.actionBtn} ${styles.cancel}`}
            onClick={() => {
              onMeetingLeave();
            }}
          >
            üìû –°–∫–∞—Å—É–≤–∞—Ç–∏
          </button>
        </div>
      </div>
    );
  }

  if (callState === 'in-call') {
    return (
      <div className={styles.container}>
        {joined === "JOINED" ? (
          <div className={styles.meetingActive}>
            <div className={styles.meetingHeader}>
              <h3>üîó –ó'—î–¥–Ω–∞–Ω–æ –∑ {userName}</h3>
              <p className={styles.participantCount}>
                –£—á–∞—Å–Ω–∏–∫—ñ–≤: {participants ? participants.size : 0}
              </p>
            </div>
            
            <div className={styles.participantsGrid}>
              {participants && [...participants.keys()].map((participantId) => (
                <ParticipantView
                  key={participantId}
                  participantId={participantId}
                  isAudioCall={isAudioCall}
                />
              ))}
            </div>
            
            <div className={styles.meetingControls}>
              <button 
                className={`${styles.controlBtn} ${styles.mic} ${micOn ? styles.active : styles.inactive}`}
                onClick={handleToggleMic}
              >
                {micOn ? 'üé§' : 'üö´üé§'} –ú—ñ–∫—Ä–æ—Ñ–æ–Ω
              </button>
              {!isAudioCall && (
                <button 
                  className={`${styles.controlBtn} ${styles.camera} ${webcamOn ? styles.active : styles.inactive}`}
                  onClick={handleToggleWebcam}
                >
                  {webcamOn ? 'üìπ' : 'üö´üìπ'} –ö–∞–º–µ—Ä–∞
                </button>
              )}
              <button 
                className={`${styles.controlBtn} ${styles.leave}`}
                onClick={handleLeave}
              >
                üìû –ó–∞–≤–µ—Ä—à–∏—Ç–∏
              </button>
            </div>
          </div>
        ) : (
          <div className={styles.connecting}>
            <p>üîÑ –ó'—î–¥–Ω–∞–Ω–Ω—è...</p>
          </div>
        )}
      </div>
    );
  }

  return null;
});

MeetingView.displayName = 'MeetingView';

export default MeetingView;