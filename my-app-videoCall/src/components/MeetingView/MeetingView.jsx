import React, { useEffect, forwardRef, useImperativeHandle } from "react";
import { useMeeting } from "@videosdk.live/react-sdk";
import { useVideoSDK } from "../../context/VideoSDKContext";
import ParticipantView from "../ParticipantView/ParticipantView";
import styles from "./MeetingView.module.scss";
import CallModal from "../CallModal/CallModal";

const MeetingView = forwardRef(
  (
    {
      // onMeetingLeave,
      userName,
      isAudioCall,
      callState,
      // onAcceptCall,
      // isPreviewVideoEnabled,
      // onTogglePreviewVideo,
    },
    ref
  ) => {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const { joined, setJoined, handleMeetingLeave, meetingId } = useVideoSDK();

    const {
      join,
      leave,
      toggleMic,
      toggleWebcam,
      participants,
      localMicOn,
      localWebcamOn,
    } = useMeeting({
      onMeetingJoined: () => {
        console.log("‚úÖ Meeting joined successfully");
        console.log("üë• Current participants:", participants?.size || 0);
        setJoined("JOINED");
      },
      onMeetingLeft: () => {
        console.log("üìû Meeting left");
        console.log("üîÑ Resetting joined state and calling handleMeetingLeave");
        setJoined(null);
        handleMeetingLeave();
      },
      onError: (error) => {
        console.error("‚ùå Meeting error:", error);
        console.log("üîÑ Resetting joined state due to error");
        setJoined(null);
      },
    });
    // console.log("participants", participants);
    useImperativeHandle(
      ref,
      () => ({
        triggerLeave: () => {
          console.log("üîÑ Triggered leave from socket event");
          console.log("üîç Current joined state:", joined);
          console.log("üîç Leave function available:", typeof leave);
          if (joined === "JOINED") {
            console.log("‚úÖ Calling leave() from triggerLeave");
            leave();
          } else {
            console.warn(
              "‚ùå Cannot call leave() - not joined or joined state:",
              joined
            );
          }
        },
      }),
      [leave, joined]
    );

    // Auto-join when call state becomes 'in-call'
    useEffect(() => {
      console.log("üîç Auto-join check:", { callState, joined, meetingId });

      if (callState === "in-call" && joined === null) {
        console.log("üîó Auto-joining meeting...");
        setJoined("JOINING");

        // –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        setTimeout(() => {
          console.log("‚ö° Executing join() after timeout");
          join();
        }, 100);
      }
    }, [callState, joined, join, setJoined]);

    // Cleanup —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
      return () => {
        console.log("üßπ Component unmounting, cleaning up");
      };
    }, []);

    // Debug: log joined state changes
    useEffect(() => {
      console.log("üîç MeetingView joined state changed:", joined);
    }, [joined]);

    // const handleAccept = () => {
    //   onAcceptCall();
    // };

    // const handleReject = () => {
    //   onMeetingLeave();
    // };

    // –ö–æ–Ω—Ç—Ä–æ–ª–∏ –º—ñ—Ç–∏–Ω–≥—É
    const handleToggleMic = () => {
      console.log("handleToggleMic");
      toggleMic();
    };

    const handleToggleWebcam = () => {
      toggleWebcam();
    };

    const handleLeave = () => {
      leave();
    };

    console.log("callState", callState);

    if (callState === "receiving") {
      return (
        <CallModal
          userName={userName}
          isAudioCall={isAudioCall}
          // onAcceptCall={handleAccept}
          // onRejectCall={handleReject}
          // onTogglePreviewVideo={onTogglePreviewVideo}
        />
        // <div className={styles.modalViewContainer}>
        //   <div className={styles.incomingCall}>
        //     <div className={styles.userAvatar}>
        //       <div className={styles.avatarCircle}>
        //         {userName.charAt(0).toUpperCase()}
        //       </div>
        //     </div>
        //     <h3 className={styles.callerName}>{userName}</h3>
        //     <p className={styles.callType}>
        //       {isAudioCall ? "üìû –ê—É–¥—ñ–æ –¥–∑–≤—ñ–Ω–æ–∫" : "üìπ –í—ñ–¥–µ–æ –¥–∑–≤—ñ–Ω–æ–∫"}
        //     </p>
        //     <div className={styles.callActions}>
        //       {/* –ö–Ω–æ–ø–∫–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–æ—é –ø—Ä–µ–≤'—é */}
        //       {onTogglePreviewVideo && (
        //         <button
        //           className={`${styles.actionBtn} ${styles.previewVideo} ${
        //             isPreviewVideoEnabled ? styles.active : styles.inactive
        //           }`}
        //           onClick={onTogglePreviewVideo}
        //           title={
        //             isPreviewVideoEnabled ? "–í–∏–º–∫–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ" : "–£–≤—ñ–º–∫–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ"
        //           }
        //         >
        //           {isPreviewVideoEnabled ? "üìπ" : "üö´üìπ"}
        //         </button>
        //       )}
        //       <button
        //         className={`${styles.actionBtn} ${styles.accept}`}
        //         onClick={handleAccept}
        //       >
        //         ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏
        //       </button>
        //       <button
        //         className={`${styles.actionBtn} ${styles.reject}`}
        //         onClick={handleReject}
        //       >
        //         ‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏
        //       </button>
        //     </div>
        //   </div>
        // </div>
      );
    }

    if (callState === "calling") {
      return (
        <CallModal
          userName={userName}
          isAudioCall={isAudioCall}
          // onAcceptCall={handleAccept}
          // onRejectCall={handleReject}
          // onTogglePreviewVideo={onTogglePreviewVideo}
        />
        // <div className={styles.modalViewContainer}>
        //   <div className={styles.outgoingCall}>
        //     <div className={styles.userAvatar}>
        //       <div className={styles.avatarCircle}>
        //         {userName.charAt(0).toUpperCase()}
        //       </div>
        //     </div>
        //     <h3 className={styles.callerName}>{userName}</h3>
        //     <p className={styles.callStatus}>–î–∑–≤–æ–Ω–∏–º–æ...</p>
        //     <div className={styles.callActions}>
        //       {/* –ö–Ω–æ–ø–∫–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–æ—é –ø—Ä–µ–≤'—é */}
        //       {/* {onTogglePreviewVideo && (
        //         <button
        //           className={`${styles.actionBtn} ${styles.previewVideo} ${
        //             isPreviewVideoEnabled ? styles.active : styles.inactive
        //           }`}
        //           onClick={onTogglePreviewVideo}
        //           title={
        //             isPreviewVideoEnabled ? "–í–∏–º–∫–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ" : "–£–≤—ñ–º–∫–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ"
        //           }
        //         >
        //           {isPreviewVideoEnabled ? "üìπ" : "üö´üìπ"}
        //         </button>
        //       )} */}
        //       <button
        //         className={`${styles.actionBtn} ${styles.cancel}`}
        //         onClick={() => {
        //           onMeetingLeave();
        //         }}
        //       >
        //         üìû –°–∫–∞—Å—É–≤–∞—Ç–∏
        //       </button>
        //     </div>
        //   </div>
        // </div>
      );
    }

    // if (callState === "in-call") {
    //   return (
    //     <div className={styles.modalViewContainer}>
    //       {joined === "JOINED" ? (
    //         <div className={styles.meetingActive}>
    //           <div className={styles.participantsGrid}>
    //             {participants &&
    //               [...participants.keys()].map((participantId) => (
    //                 <ParticipantView
    //                   key={participantId}
    //                   participantId={participantId}
    //                 />
    //               ))}
    //           </div>

    //           <div className={styles.meetingControls}>
    //             <button
    //               className={`${styles.controlBtn} ${styles.camera} ${
    //                 localWebcamOn ? styles.active : styles.inactive
    //               }`}
    //               onClick={handleToggleWebcam}
    //               title={
    //                 isAudioCall
    //                   ? "–í–∫–ª—é—á–∏—Ç–∏ –≤—ñ–¥–µ–æ (–∞—É–¥—ñ–æ –¥–∑–≤—ñ–Ω–æ–∫)"
    //                   : "–£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –∫–∞–º–µ—Ä—É"
    //               }
    //             >
    //               {localWebcamOn ? "üìπ" : "üö´üìπ"} –ö–∞–º–µ—Ä–∞
    //             </button>
    //             <button
    //               className={`${styles.controlBtn} ${styles.mic} ${
    //                 localMicOn ? styles.active : styles.inactive
    //               }`}
    //               onClick={handleToggleMic}
    //             >
    //               {localMicOn ? "üé§" : "üö´üé§"} –ú—ñ–∫—Ä–æ—Ñ–æ–Ω
    //             </button>

    //             <button
    //               className={`${styles.controlBtn} ${styles.leave}`}
    //               onClick={handleLeave}
    //             >
    //               üìû –ó–∞–≤–µ—Ä—à–∏—Ç–∏
    //             </button>
    //           </div>
    //         </div>
    //       ) : (
    //         <div className={styles.connecting}>
    //           <p>üîÑ –ó'—î–¥–Ω–∞–Ω–Ω—è...</p>
    //         </div>
    //       )}
    //     </div>
    //   );
    // }
    if (callState === "in-call") {
      return (
        <div>
          <CallModal
            userName={userName}
            isAudioCall={isAudioCall}
            localMicOn={localMicOn}
            localWebcamOn={localWebcamOn}
            participants={participants}
            joined={joined}
            callState={callState}
            // onAcceptCall={handleAccept}
            // onRejectCall={handleReject}
            // onTogglePreviewVideo={onTogglePreviewVideo}
          />
        </div>
      );
    }

    return null;
  }
);

MeetingView.displayName = "MeetingView";

export default MeetingView;
